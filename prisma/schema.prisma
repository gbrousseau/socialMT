// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscription  Subscription?
  socialAccounts SocialAccount[]
  metrics       Metric[]
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String
  status        String    // active, canceled, past_due
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currentPeriodEnd DateTime
}

model SocialAccount {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform      String    // instagram, twitter, facebook, etc.
  accountId     String    // platform-specific account ID
  accountName   String    // username or handle
  accessToken   String?   // encrypted access token
  refreshToken  String?   // encrypted refresh token
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  metrics       Metric[]

  @@unique([platform, accountId])
}

model Metric {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  type            String    // followers, likes, comments, shares, etc.
  value           Float
  timestamp       DateTime  @default(now())

  @@index([userId, socialAccountId, timestamp])
} 